Big-endian =			Network Byte Order	(ordre des octets du reseau)
My computer store in =	Host Byte Horder	(ordre des octets de l'hote)
Little-endian depends on the computer

/*********************************EPOLL************************************/

Epoll() est une methode pour implementer des socket non bloquant baser sur des EVENTS.
Epoll() est une API similaire a poll()
Epoll() detecte les changement d'etats ou les changements de niveaux. (edge-triggered / level-triggered)
Epoll() peut gerer un grand nombre de fd.
Epoll() contient une structure/instance (dans le kernel) qui a 2 liste :
		- interest list (= epoll set) : fd qui sont enregistrer
		- ready list : fd qui sont "ready" for I/O
Epoll(), par defaut est en mode detection de changement de niveaux (level-triggered) LT

epoll_create() creer une nouvelle instance d'Epoll() ainsi que sont fd.

epoll_ctl(1 arg, 2 arg, 3 arg, 4 arg)
epoll_ctl() est un appel system
epoll_ctl() peut ajouter / modifier / supprimer des entree de la "interest list" de l'instance d'Epoll()
epoll_ctl() : l'operation definie par le 2eme arg sera executer par le 3eme arg (notre socket de base)
epoll_ctl() : l'attribut "events" de la structure "epoll_event" (4eme arg) peut recevoir different "type"
-> Ces "types" vont dicter le comportement du 3eme arg 
-> exemple 1 : notre "sokcet de base" est disponible en lecture / en ecriture ...
-> exemple 2 : EPOLLET est un flag de comportement, il passe en mode detection de changement de niveau (edge-triggered) ET

epoll_wait(1 arg, 2 arg, 3 arg, 4 arg)
epoll_wait() attend un EVENT I/O depuis le fd de notre instance Epoll()
epoll_wait() renvoi un nombre max d'EVENT, le nombre de fd "ready"
epoll_wait() : 4eme arg egal a -1 va bloquer indefiniment

/**********************************POST************************************/

methode
Host
accept
content-type
content-length

/*******first example*******/

POST / HTTP/1.1
host: 178.128.163.152:31557      
user-agent: mozilla/5.0
Connection: keep-alive
content-type: application/x-www-form-urlencoded
content-length: 29

username=admin&password=admin

/*******second example********/

POST /search.php HTTP/1.1
host: 178.128.163.152:31557
user-agent: mozilla/5.0
Connection: keep-alive
Content-Type: application/json
content-length: 19
cookie: PHPSESSID=grl31sfko3omqcmkq5q0i0pq5g

{"search":"london"}

POST /php-example.php HTTP/1.1
Host: localhost:8080
Content-Type: application/x-www-form-urlencoded
Content-Length: 13

say=ok&to=lou

/*********TO-DO list**********/

- cgi script, php-cgi : quand l'executer precisement, pour quel fichiers

- POST request : traitee le body de la requete post, voir ou on decode le body
(decoder dans le script cgi ou dans la partie traitement de POST)

- redirections : si une page rechercher n'existe pas, 
comment afficher une page d'erreur  


/****a dire****/

url valide : form submission methode get --> QUERY_STRING inside url
request parsing (mass) : get body si cest methode POST, get QUERY_STRING si methode GET (besoin pour cgi)

/***********httpHeader.cpp*************/

dans fillheader(*buf)

while (line[j] != '\n' && line[j] != '\r' && line[j] != ' ' && line[j] != 0)
instead of :
while (line[j] != '\n' && line[j] != '\r' && line[j] != ' ')
??
std::cout << "line[" << j << "] = |" << line[j] << "| = " << line[j] + 48 << std::endl;

std::cout << "j = " << j << " | pos = " << pos << " | len = " << len << " | tmp = " << tmp << std::endl;